package com.prf.inventario.service;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.User.UserBuilder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.transaction.annotation.Transactional;

import com.prf.inventario.model.LoginUsuario;
import com.prf.inventario.repository.LoginUsuarioRepository;

public class LoginUsuarioService implements UserDetailsService{
	
	@Autowired
	private LoginUsuarioRepository loginUsuarioRepository;
	
	public Iterable<LoginUsuario> listarLoginUsuarios() {
		return loginUsuarioRepository.findAll();
	}
	
	public Optional<LoginUsuario> buscarLoginUsuario (String nomeUsuario) {
		return loginUsuarioRepository.findById(nomeUsuario);
	}
	
	public LoginUsuario salvarLoginUsuario (LoginUsuario loginUsuario) {
		return loginUsuarioRepository.save(loginUsuario);
	}
	
	public void deletarLoginUsuario (String nomeUsuario) {
		loginUsuarioRepository.deleteById(nomeUsuario);
	}
	
	@Transactional(readOnly = true)
	  @Override
	  public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {

	    Optional <LoginUsuario> loginUsuario = loginUsuarioRepository.findById(loginUsuario);
	    UserBuilder builder = null;
	    if (user != null) {
	      
	      builder = org.springframework.security.core.userdetails.User.withUsername(username);
	      builder.disabled(!user.isEnabled());
	      builder.password(user.getPassword());
	      String[] authorities = user.getAuthorities()
	          .stream().map(a -> a.getAuthority()).toArray(String[]::new);

	      builder.authorities(authorities);
	    } else {
	      throw new UsernameNotFoundException("User not found.");
	    }
	    return builder.build();
	  }
}
